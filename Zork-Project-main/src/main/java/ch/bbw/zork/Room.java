package ch.bbw.zork;import java.util.Set;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Iterator;import java.util.List;class Room {    private Item item;    private String roomName;    private String description;    private ArrayList<Item> itemList;              //this is the room inventory    private HashMap<String, Room> exits;        // stores exits of this room.    /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a kitchen" or "an open court yard".     */    public Room(String description) {        this.description = description;        exits = new HashMap<String, Room>();    }    public Room() {        // default constructor.        roomName = "DEFAULT ROOM";        description = "DEFAULT DESCRIPTION";        itemList = new ArrayList<Item>();        exits = new HashMap<String, Room>();    }    /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     */    public void setExits(Room north, Room east, Room south, Room west) {        exits.put("north", north);        exits.put("east", east);        exits.put("south", south);        exits.put("west", west);    }    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String shortDescription() {        return "Room: " + roomName + "\n\n" + description;    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west ".     */    private String exitString() {        String returnString = "Exits:";        Set keys = exits.keySet();        for (Iterator iter = keys.iterator(); iter.hasNext(); )            returnString += " " + iter.next();        return returnString;    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room nextRoom(String direction) {        return (Room) exits.get(direction);    }    public String getRoomName() {        return roomName;    }    public void setRoomName(String roomName) {        this.roomName = roomName;    }    public String getDescription() {        return ("You are  " + description);    }    public void setDescription(String description) {        this.description = description;    }    public ArrayList<Item> getRoomInventory() {        return itemList;    }    //takes the string array of the items in the room and puts it in an ArrayList of items    public void setRoomInventory(String[] items) {        List<String> stringItems = Arrays.asList(items);        ArrayList<Item> realList = new ArrayList<Item>(stringItems.size());        for (int i = 0; i < realList.size(); i++) {            if (stringItems.get(i).equals("none")) {                i++;            } else {                realList.add(item.stringToItem(stringItems.get(i)));            }        }        this.itemList = realList;    }      /*      * public boolean inRoom(String string) {             for(int i=0;i<itemList.size();i++) {                   if(itemList.get(i).equals(string))                          return true;             }             return false;      }      */}