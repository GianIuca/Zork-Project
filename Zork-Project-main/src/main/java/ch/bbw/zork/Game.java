package ch.bbw.zork;import java.util.Scanner;public class Game {    private final Parser parser;    private Room currentRoom;    private Room lastRoom;    private final Room garden;    private Room library;    private Room brewery;    private Room smithy;    private Room hallway;    private Room treasureRoom;    private Room throneRoom;    private HungerBar hungerBar;    private Inventory inv = new Inventory();    private final Health health = new Health();    public Game() {        parser = new Parser(System.in);        Quiz quiz1 = new Quiz("I’m tall when I’m young, and I’m short when I’m old. What am I? ", "candle");        Quiz quiz2 = new Quiz("What is it that lives if it is fed, and dies if you give it a drink?", "fire");        Quiz quiz3 = new Quiz("Some months have 31 days, others have 30 days, but how many have 28 days?", "12");        Quiz quiz4 = new Quiz("What provides the strength and power to walk through walls?", "door");        Item key1 = new Item("key1", "key", "0.28 Kg");        Item key2 = new Item("key2", "key", "0.28 Kg");        Item key3 = new Item("key3", "key", "0.28 Kg");        Item sword = new Item("Sword", "weapon", "0.9 Kg");        Item chestplate = new Item("Chest plate", "armour", "2 Kg");        Item can = new Item("Can", "rubbish", "0.32 Kg");        Item spellbook = new Item("Spell book", "magic", "0.7 Kg");        Item healthpotion = new Item("Health potion", "potion", "0.5 Kg");        Item crown = new Item("Crown", "valuable", "2 Kg");        Item rottenpotato = new Item("Rotten potato", "rubbish", "0.2 Kg");        Item leather = new Item("Leather", "rubbish", "0.1 Kg");        Item magicwand = new Item("Magic wand", "weapon", "1.2 Kg");        Item goldcoins = new Item("Gold coins", "valuable", "0.0786 Kg");        garden = new Room("garden");        library = new Room("library", key1, quiz1, false, null);        brewery = new Room("brewery", healthpotion, goldcoins, null);        smithy = new Room("smithy", sword, key2, quiz3, false, key1);        hallway = new Room("hallway", can, key3, quiz2, false, key2);        treasureRoom = new Room("treasure room", magicwand, goldcoins, quiz4, true, key3);        throneRoom = new Room("throne room", crown, leather);        garden.setExits(library, null, null, null);        library.setExits(hallway, smithy, garden, brewery);        brewery.setExits(null, library, null, null);        smithy.setExits(hallway, null, null, library);        hallway.setExits(throneRoom, treasureRoom, library, null);        treasureRoom.setExits(null, null, null, hallway);        throneRoom.setExits(null, null, hallway, null);        currentRoom = garden; // start game outside        Item longsword = new Item("Sword1");        Item milk = new Item("A bucket of milk");        Item muschroomstew = new Item("Mushroom stew ");        inv.addItem(longsword);        inv.addItem(milk);        inv.addItem(muschroomstew);    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Delsgade Castle!");        System.out.println("You will have to find code words to open the treasureroom");        System.out.println("Type 'help' if you need help.");        health.getHungerBar();        System.out.println(currentRoom.getDescription());    }    private boolean processCommand(Command command) {        final Scanner scanner = new Scanner(System.in);        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);        } else if (commandWord.equals("back")) {            back();        } else if (commandWord.equals("inv")) {            inv.printInventory();        } else if (commandWord.equals("hunger")) {            health.getHungerBar();        } else if (commandWord.equals("map")) {            Map.show(currentRoom);        } else if (commandWord.equals("read")) {            if (currentRoom.getRiddle() != null) {                if (currentRoom.startRiddle()) {                    System.out.println("you solved the riddle");                    pickItems();                }            } else {                System.out.println("there is nothing interesting here");            }        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true; // signal that we want to quit            }        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Delsgade Castle.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void back() {        if (lastRoom != null) {            currentRoom = lastRoom;            System.out.println(currentRoom.longDescription());        } else {            System.out.println("you cant go back");        }    }    private void pickItems() {        if (currentRoom.getItem() == null) {            System.out.println("This room is empty.");        } else {            inv.addItem(currentRoom.getItem());            System.out.println("you picked up " + currentRoom.getItem());        }        System.out.println("Your commands are words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        final Scanner scanner = new Scanner(System.in);        String commandWord = command.getCommandWord();        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null) {                System.out.println("There is no door!");            } else {                lastRoom = currentRoom;                currentRoom = nextRoom;            }        }        System.out.println(currentRoom.getDescription());    }}