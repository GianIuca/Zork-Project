package ch.bbw.zork;import java.util.ArrayList;public class Game {    private Parser parser;    private Room currentRoom;    private Room garden, library, brewery, smithy, hallway, treasureRoom, throneRoom;    private HungerBar hungerBar;    private Inventory inv = new Inventory();    private final Health health = new Health();    public Game() {        parser = new Parser(System.in);        garden = new Room("outside G block on Peninsula campus");        library = new Room("lab, a lecture theatre in A block");        brewery = new Room("the Seahorse Tavern (the campus pub)");        smithy = new Room("the G Block");        hallway = new Room("the computing admin office");        treasureRoom = new Room("the computing admin office");        throneRoom = new Room("ISLAND BOY");        garden.setExits(library, null, null, null);        library.setExits(hallway, smithy, garden, brewery);        brewery.setExits(null, library, null, null);        smithy.setExits(hallway, null, null, library);        hallway.setExits(throneRoom, treasureRoom, library, null);        treasureRoom.setExits(null, null, null, hallway);        throneRoom.setExits(null, null, hallway, null);        currentRoom = garden; // start game outside        Item sword = new Item("Sword1");        Item milk = new Item("A bucket of milk");        Item muschroomstew = new Item("Mushroom stew ");        inv.addItem(sword);        inv.addItem(milk);        inv.addItem(muschroomstew);    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Delsgade Castle!");        System.out.println("You will have to find code words to open the treasureroom");        System.out.println("Type 'help' if you need help.");        health.getHungerBar();        System.out.println(currentRoom.getDescription());    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);        } else if (commandWord.equals("back")) {            goRoom(command);        } else if (commandWord.equals("inv")) {            inv.printInventory();        } else if (commandWord.equals("hunger")) {            health.getHungerBar();        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true; // signal that we want to quit            }        }        return false;    }    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null)                System.out.println("There is no door!");            else {                currentRoom = nextRoom;                System.out.println(currentRoom.getDescription());            }        }    }}